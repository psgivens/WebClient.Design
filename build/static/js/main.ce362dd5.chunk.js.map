{"version":3,"sources":["logo.svg","app/Demo.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","DemoComponent","props","state","password","username","onUsernameChanged","bind","onPasswordChanged","onSubmitPressed","className","role","aria-label","aria-expanded","data-target","href","aria-hidden","id","type","name","placeholder","value","size","event","preventDefault","React","MainApp","src","logo","alt","target","rel","App","path","component","Demo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,qUCuJ5BC,E,YAnIX,WAAYC,GAAmB,IAAD,8BAC1B,4CAAMA,KACDC,MAAQ,CACTC,SAAU,GACVC,SAAU,IAEd,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBACzB,EAAKE,gBAAkB,EAAKA,gBAAgBF,KAArB,gBARG,E,sEAe1B,OACI,gCACI,uBAAKG,UAAU,SAASC,KAAK,aAAaC,aAAW,mBACjD,uBAAKF,UAAU,gBACX,qBAAGC,KAAK,SAASD,UAAU,gBAAgBE,aAAW,OAAOC,gBAAc,QAAQC,cAAY,oBAAoBC,KAAK,KACpH,wBAAMC,cAAY,SAClB,wBAAMA,cAAY,SAClB,wBAAMA,cAAY,WAG1B,uBAAKN,UAAU,cAAcO,GAAG,qBAC5B,uBAAKP,UAAU,cACX,qBAAGA,UAAU,cAAcK,KAAK,KAAhC,QAA4C,qBAAGL,UAAU,cAAcK,KAAK,UAAhC,YAKxD,uBAAKE,GAAG,iBACJ,yBAAOA,GAAG,WAAV,qBAIA,uBAAKP,UAAU,cAAf,0BAEI,uBAAKA,UAAU,mBACX,2BAASA,UAAU,WACf,uBAAKA,UAAU,iBAEX,yBAAOQ,KAAK,OAAOC,KAAK,WAAWC,YAAY,gBAC3CC,MAAM,sBAAsBC,KAAM,KACtC,yBAAOJ,KAAK,WAAWC,KAAK,WAAWC,YAAY,gBAC/CC,MAAM,sBAAsBC,KAAM,OAuB9C,2BAASZ,UAAU,WACf,uBAAKA,UAAU,iBACX,yBAAOA,UAAU,SACb,6BACI,0BACI,iCACA,qCAGR,6BACI,0BACI,6CACA,2EAEJ,0BACI,sCACA,0BAAI,uBAAKA,UAAU,aAAf,wBAER,0BACI,2CACA,0BAAI,uBAAKA,UAAU,aAAf,+CAER,0BACI,4CACA,0BAAI,uBAAKA,UAAU,aAAf,uDAYpC,yBAAOO,GAAG,aAAV,sB,wCAOcM,GACtBA,EAAMC,mB,wCAIgBD,GACtBA,EAAMC,mB,sCAIcD,GACpBA,EAAMC,qB,GA5HcC,aCNtBC,G,8BAAoB,WACxB,OACE,yBAAKhB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKiB,IAAKC,IAAMlB,UAAU,WAAWmB,IAAI,SACzC,mCACO,6CADP,wBAGA,uBACEnB,UAAU,WACVK,KAAK,sBACLe,OAAO,SACPC,IAAI,uBAJN,mBA4BOC,EAfY,WACzB,OACE,kBAAC,IAAD,KACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,QAAQC,UAAYR,IAChC,kBAAC,IAAD,CAAOO,KAAK,QAAQC,UAAYC,IAGhC,kBAAC,IAAD,CAAOF,KAAK,IAAIC,UAAYR,QC/BlBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ce362dd5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","\nimport * as React from 'react'\n// import * as container from 'src/jscommon/components/loginComponent/loginComponentContainer'\n// import Button from 'src/jscommon/controls/Button'\n// import TextInput from 'src/jscommon/controls/TextInput'\n// import MainMenu from './MainMenu';\n\ntype ThisProps = {}\n//   container.StateProps\n//   & container.ConnectedDispatch\n//   & container.AttributeProps\n\ntype ComponentState = {} & {\n    username: string\n    password: string\n}\n\n\n// TODO: Change to React.FC and remove all react components. \nclass DemoComponent extends React.Component<ThisProps, ComponentState> {\n    constructor(props: ThisProps) {\n        super(props)\n        this.state = {\n            password: \"\",\n            username: \"\"\n        }\n        this.onUsernameChanged = this.onUsernameChanged.bind(this)\n        this.onPasswordChanged = this.onPasswordChanged.bind(this)\n        this.onSubmitPressed = this.onSubmitPressed.bind(this)\n    }\n\n\n    // FIXME: Get this working like the example in PersonalTracker, without using Bulma. (localhost:3000/demo)\n\n    public render() {\n        return (\n            <>\n                <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n                    <div className=\"navbar-brand\">\n                        <a role=\"button\" className=\"navbar-burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"my-important-menu\" href=\"/\" >\n                            <span aria-hidden=\"true\" />\n                            <span aria-hidden=\"true\" />\n                            <span aria-hidden=\"true\" />\n                        </a>\n                    </div>\n                    <div className=\"navbar-menu\" id=\"my-important-menu\">\n                        <div className=\"navbar-end\">\n                            <a className=\"navbar-item\" href=\"/\">Home</a><a className=\"navbar-item\" href=\"/Login\">Login</a>\n                        </div>\n                    </div>\n                </nav>\n\n                <div id='authenticated'>\n                    <aside id=\"sidebar\">\n                        This is a sidebar\n                    </aside>\n\n                    <div className=\"appcontent\">\n                        This is the app content\n                        <div className=\"container-fluid\" >\n                            <section className=\"section\">\n                                <div className=\"container box\">\n\n                                    <input type=\"text\" name=\"username\" placeholder=\"Enter a value\"\n                                        value='this.state.username' size={30} />\n                                    <input type=\"password\" name=\"password\" placeholder=\"Enter a value\"\n                                        value='this.state.password' size={30} />\n                                    {/* <button type=\"button\" className=\"btn btn-primary\" text=\"Login\" /> */}\n\n                                    {/* <TextInput\n                  inputType=\"text\"\n                  label=\"Username\"\n                  name=\"username\"\n                  placeholder=\"Enter a value\"\n                  value={this.state.username}\n                  size={30}\n                  onChange={this.onUsernameChanged} />\n                <TextInput\n                  inputType=\"password\"\n                  label=\"Password\"\n                  name=\"password\"\n                  placeholder=\"Enter a value\"\n                  value={this.state.password}\n                  size={30}\n                  onChange={this.onPasswordChanged} />\n                <Button onClick={this.onSubmitPressed} text=\"Login\" /> */}\n                                </div>\n                            </section>\n\n                            <section className=\"section\">\n                                <div className=\"container box\">\n                                    <table className=\"table\">\n                                        <thead>\n                                            <tr>\n                                                <th>Key</th>\n                                                <th>Value</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            <tr>\n                                                <td>isAuthenticated</td>\n                                                <td> JSON.stringify(this.props.isAuthenticated) </td>\n                                            </tr>\n                                            <tr>\n                                                <td>raw auth</td>\n                                                <td><div className=\"textValue\"> this.props.token </div></td>\n                                            </tr>\n                                            <tr>\n                                                <td>Header Claims</td>\n                                                <td><div className=\"textValue\"> JSON.stringify(this.props.headerClaims) </div></td>\n                                            </tr>\n                                            <tr>\n                                                <td>Payload Claims</td>\n                                                <td><div className=\"textValue\"> JSON.stringify(this.props.payloadClaims) </div></td>\n                                            </tr>\n\n                                        </tbody>\n                                    </table>\n\n                                </div>\n                            </section>\n                        </div>\n\n                    </div>\n                </div>\n                <aside id=\"statusbar\">\n                    (1) | (9) | (7)\n      </aside>\n\n            </>)\n    }\n\n    private onUsernameChanged(event: React.SyntheticEvent<HTMLInputElement>) {\n        event.preventDefault()\n        // this.setState({ ...this.state, username: event.currentTarget.value })    \n    }\n\n    private onPasswordChanged(event: React.SyntheticEvent<HTMLInputElement>) {\n        event.preventDefault()\n        // this.setState({ ...this.state, password: event.currentTarget.value })    \n    }\n\n    private onSubmitPressed(event: React.SyntheticEvent<HTMLButtonElement>) {\n        event.preventDefault()\n        // this.props.login!({\n        //   password: this.state.password,\n        //   username: this.state.username\n        // });  \n    }\n}\n\nexport default DemoComponent;","import React from 'react';\nimport logo from '../logo.svg';\nimport { BrowserRouter as Router, Route, Switch   } from \"react-router-dom\"\n\nimport Demo from './Demo';\n\n\nimport '../skin/css/sample.css';\nimport '../skin/css/AppColors.css';\nimport '../skin/css/App.css';\nimport '../skin/css/AppLargeScreens.css';\nimport '../skin/css/AppSmallScreens.css';\n\nconst MainApp: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nconst App: React.SFC<{}> = () => {\n  return (\n    <Router>\n      <>\n        <Switch>\n          <Route path=\"/Home\" component={ MainApp } />\n          <Route path=\"/Demo\" component={ Demo } />\n          {/* <Route path=\"/Login\" component={ Login } />\n          <Route path=\"/BladeDemo\" component={ BladeDemo } /> */}\n          <Route path=\"/\" component={ MainApp } />                      \n        </Switch>\n      </>\n  </Router>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}